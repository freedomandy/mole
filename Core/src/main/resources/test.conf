plugins {
  source = ["com.freedomandy.mole.testplugin.source.TestSource"]
  transform = ["com.freedomandy.mole.testplugin.transform.TestStage"]
  sink = ["com.freedomandy.mole.testplugin.synchronizers.TestSynchronizer"]
}
synchronize {
  source {
    type = "MONGODB" # such as MONGODB or HIVE
    path = "mongodb://127.0.0.1:27017/test.account"
    key = "custacct,date,stock"
  }
  sink: [
    {
      type = "MONGODB"
      path = "mongodb://127.0.0.1:27017/test.test_result"
    },
    {
      type = "ELASTIC_SEARCH"
      url = "http://127.0.0.1:9200"
      resource = "spark/test"
    }
  ]
  transform {
    time =  {
      field = "date"
      format = "yyyy-MM-dd" # e.g. 'unix_timestamp' or time format such as 'yyyyMMdd HH:mm:ss'
      outputName = "time"
    }
    flow: [
      {
        action = "FieldMapping"
        from = "cus_acct,cus_id,date,stock,qty,price,time"
        to = "account,customerId,updatedDate,ticker,quantity,amount,time"
      },
      {
        action = "Filling" # TODO: defaultValue, mean, max, min
        sessionKey = "account,ticker"
        fillFieldIndex = "amount"
        sortFieldIndex = "time"
      },
      {
        action = "Custom"
        input = "updatedDate"
        output = "date"
        outputType = "Integer"
        function = """(s: Seq[String]) => { s.head.replace("-","").toInt }"""
      }
      ,{
        action = "Filtering"
        field = "amount"
        value = "0" # {constant_value} or {$fieldName}
        operator = "==" # e.g. '>', '<', '>=', '<=' and '==', '!='
      }
      , {
        action= "GroupBy"
        key = "account,ticker,updatedDate"
        aggregate = "sum" # e.g. 'sum', 'count', 'max', 'min' and 'avg'
        aggregateFields = "quantity,amount"
      }
    ]
  }
}